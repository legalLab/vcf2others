[{"path":"https://legallab.github.io/vcf2others/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Tomas Hrbek Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"vcf2others","text":"package needs installed GitHub. devtools::install_github(\"legalLab/vcf2others\")","code":"library(vcf2others)"},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"vcf2others","text":"package two main functionalities. First, used filtering, subsetting, merging otherwise wrangling VCF files. Second, used converting VCF file population genetic phylogenetic formats downstream analyses.","code":""},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"how-to-use-the-functions-of-this-package","dir":"Articles","previous_headings":"","what":"How to use the functions of this package","title":"vcf2others","text":"Following examples usage functions package.","code":""},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"load-vcf-and-associated-files-of-individuals-and-groups","dir":"Articles","previous_headings":"How to use the functions of this package","what":"Load VCF and associated files of individuals and groups","title":"vcf2others","text":"First need load files. addition VCF, also need white/black list individuals (read file one column ‘id’ header), strata file associating individuals groups (read file two tab-separated columns ‘id’ ‘pop’ headers), file groups (read file one column ‘pop’ header). auxilary files used keeping/excluding individuals groups individuals filtering conversion data formats. strata file also necessary since many population genetic formats require information grouping individuals.","code":"library(vcfR) #>  #>    *****       ***   vcfR   ***       ***** #>    This is vcfR 1.14.0  #>      browseVignettes('vcfR') # Documentation #>      citation('vcfR') # Citation #>    *****       *****      *****       ***** library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(vcf2others)  # path to example files fpath <- paste0(system.file(\"extdata\", package=\"vcf2others\"), \"/\") # set path and project name path <- \"/home/tomas/git/legal_public/packages/data/\" project <- \"trigonatus_all_sub\"  # load vcf vcf <- read.vcfR(paste0(fpath, project, \".vcf.gz\")) #> Scanning file to determine attributes. #> File attributes: #>   meta lines: 22 #>   header_line: 23 #>   variant count: 10000 #>   column count: 21 #>  Meta line 22 read in. #> All meta lines processed. #> gt matrix initialized. #> Character matrix gt created. #>   Character matrix gt rows: 10000 #>   Character matrix gt cols: 21 #>   skip: 0 #>   nrows: 10000 #>   row_num: 0 #>  Processed variant 1000 Processed variant 2000 Processed variant 3000 Processed variant 4000 Processed variant 5000 Processed variant 6000 Processed variant 7000 Processed variant 8000 Processed variant 9000 Processed variant 10000 Processed variant: 10000 #> All variants processed  # read individuals to include indivs <- read.table(paste0(fpath, \"indivs_b\"), header = TRUE)$id %>%   as.character()  # check if all indivs are in vcf_names if (any(!(indivs %in% colnames(vcf@gt)[-1]))) stop(paste(\"Some individuals in list not in VCF\"))  # read all sample names in vcf vcf_names <- colnames(vcf@gt)[-1] %>%   as_tibble() %>%   rename(id = 1) %>%   mutate(id, id = as.character(id))  # read sample to group assignment strata <- read.table(paste0(fpath, \"strata\"), header = TRUE) %>%   as_tibble() %>%   mutate(id, id = as.character(id))  # assign samples in vcf to groups strata <- vcf_names %>%   left_join(strata) #>  [1m [22mJoining with `by = join_by(id)`  # check if all samples in vcf are assigned to groups if (any(is.na(strata$pop) == TRUE)) {   print(\"vcf has individuals not assigned to a group\")   print(strata[is.na(strata$pop) == TRUE,]) } else {   indiv_group <- as.factor(strata$pop) }  # read groups to be used; filter only those that are actually present groups <- read.table(paste0(fpath, \"groups\"), header = TRUE)[,1] %>%   .[. %in% unique(strata$pop)] %>%   as.factor()"},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"filtering-subsetting-merging-and-otherwise-wrangling-vcf-files","dir":"Articles","previous_headings":"How to use the functions of this package","what":"Filtering, subsetting, merging and otherwise wrangling VCF files","title":"vcf2others","text":"functions can used directly VCF, many called functions package. example vcf_filter_invariant() remove invariant SNPs VCF, however, VCF definition invariant SNPs. However, VCF subsetted certain individuals removed, SNPs can become invariant need removed.","code":""},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"subsetting","dir":"Articles","previous_headings":"How to use the functions of this package > Filtering, subsetting, merging and otherwise wrangling VCF files","what":"Subsetting","title":"vcf2others","text":"functions vcf_extract_indivs(), vcf_extract_pops() vcf_sub_loci() used subset VCF specific individuals, group (individuals group/population), random subset loci, respectively. Subsetting individuals groups can done either whitelist (keep listed individuals/groups) blacklist (remove listed individuals/groups).","code":"# subset VCF by individuals (default whitelist = TRUE, remove invariants = TRUE) indivs1 <- c(\"CTGA_H4683\", \"CTGA_H4689\") vcf1 <- vcf_extract_indivs(vcf, indivs1)  # subset VCF by groups (default whitelist = TRUE, remove invariants = TRUE) groups1 <- c(\"bob\", \"joe\") %>%   as.factor() vcf1 <- vcf_extract_pops(vcf, indiv_group, groups1)  # subset VCF by n random loci (default n_loci = 1000) vcf1 <- vcf_sub_loci(vcf, n_loci = 5000)"},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"filtering","dir":"Articles","previous_headings":"How to use the functions of this package > Filtering, subsetting, merging and otherwise wrangling VCF files","what":"Filtering","title":"vcf2others","text":"Filtering consists removing individuals loci based specific properties. function vcf_filter_missing_indivs() removes individuals % missing SNP threshold. functions filter properties individuals SNPs across individuals. function vcf_filter_missingness() removes SNPs % missing threshold, vcf_filter_quality() removes SNPs quality threshold, vcf_filter_maf() removes SNPs minor allele frequency % threshold, vcf_filter_hets() removes SNPs heterozigosity % threshold, vcf_filter_rank() removes SNPs rank % threshold (rank specific VCFs generated DiscoSnpRad measures likelihood observed SNP variation due paralogs), vcf_filter_coverage() removes SNPs specific coverage (makes missing individual). Finally vcf_filter_invariant() removes invariant SNPs (SNPs may become invariant subsetting filtering). functions vcf_filter_oneSNP() vcf_filter_multiSNP() filter VCF remove linked SNPs (retain unliked SNPs) retain linked SNPs, respectively. general, analyses assume SNPs unlinked, however, analyses FineRadStructure work linked SNPs.","code":"# filter VCF for analyses (unlinked SNPs) vcf_oneSNP <- vcf_extract_indivs(vcf, indivs, whitelist = FALSE) %>%   vcf_filter_missing_indivs(.9) %>%   vcf_filter_rank(.5) %>%   vcf_filter_maf(.03) %>%   vcf_filter_coverage(6) %>%   vcf_filter_oneSNP() %>%   vcf_filter_missingness(.4) %>%   vcf_filter_missing_indivs(.2) #> removed samples are: CTGA_H3327  #>  removed samples are: CTGA_H3600  #> [1] \"final % missing data in VCF is 57.17 %\" #> [1] \"final % missing data in VCF is 25.42 %\" #> removed samples are: CTGA_H3646  #>  removed samples are: CTGA_H4598  #>  removed samples are: CTGA_H4613  #>  removed samples are: CTGA_H4683  #>  removed samples are: CTGA_H4689  #> [1] \"final % missing data in VCF is 2.92 %\"  # filter VCF for analyses (linked SNPs) vcf_multiSNP <- vcf_extract_indivs(vcf, indivs, whitelist = FALSE) %>%   vcf_filter_missing_indivs(.9) %>%   vcf_filter_rank(.5) %>%   vcf_filter_maf(.03) %>%   vcf_filter_coverage(6) %>%   vcf_filter_multiSNP() %>%   vcf_filter_missingness(.4) %>%   vcf_filter_missing_indivs(.2) #> removed samples are: CTGA_H3327  #>  removed samples are: CTGA_H3600  #> [1] \"final % missing data in VCF is 57.17 %\" #> [1] \"final % missing data in VCF is 25.2 %\" #> removed samples are: CTGA_H3646  #>  removed samples are: CTGA_H4613  #>  removed samples are: CTGA_H4683  #>  removed samples are: CTGA_H4689  #> [1] \"final % missing data in VCF is 5.15 %\""},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"extracting-merging-and-adding","dir":"Articles","previous_headings":"How to use the functions of this package > Filtering, subsetting, merging and otherwise wrangling VCF files","what":"Extracting, merging and adding","title":"vcf2others","text":"functions vcf_merge(), vcf_add_indivs(), vcf_extract_indivs() vcf_extract_pops() used merge two VCF files, add individuals second VCF first VCF, extract individuals/groups VCF saving separate VCF. vcf_add_indivs(), vcf_extract_indivs() vcf_extract_pops() functions designed mind work outgroups. phylogenetic effects, outgroups relatively missing data ingroups, often removed filtering. solution extract outgroup taxa vcf_extract_indivs() vcf_extract_pops(), filter ingroup VCF, add outgroup taxa vcf_add_indivs(). important filter invariant loci filtering ingroup, filter vcf_filter_invariant() adding back outgroup. functions vcf_extract_indivs(), vcf_extract_pops(), vcf_filter_missing_indivs() vcf_filter_coverage() default filter invariants, can turned using “f_invar = FALSE” flag.","code":"# extract individuals from VCF (keep all loci) indivs1 <- c(\"CTGA_H4644\", \"CTGA_H4661\", \"CTGA_H4683\", \"CTGA_H4689\") vcf_outgrp <- vcf_extract_indivs(vcf, indivs1, f_invar = FALSE) vcf_ingrp <- vcf_extract_indivs(vcf, indivs1, whitelist = FALSE, f_invar = FALSE)  # extract groups of individuals from VCF (keep all loci) groups1 <- as.factor(\"outgrp\") vcf_outgrp <- vcf_extract_pops(vcf, indiv_group, groups1, f_invar = FALSE) vcf_ingrp <- vcf_extract_pops(vcf, indiv_group, groups1, whitelist = FALSE, f_invar = FALSE)  # merge vcf_outgrp into vcf_ingrp vcf1 <- vcf_merge(vcf_ingrp, vcf_outgrp) #> Joining with `by = join_by(FORMAT, id)`  # add individuals from vcf_outgrp into vcf_ingrp (whitelist = TRUE is default) indivs1 <- c(\"CTGA_H4683\", \"CTGA_H4689\") vcf1 <- vcf_add_indivs(vcf_ingrp, vcf_outgrp, indivs1) #> Joining with `by = join_by(FORMAT, id)`"},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"filtering-with-outgroup","dir":"Articles","previous_headings":"How to use the functions of this package > Filtering, subsetting, merging and otherwise wrangling VCF files","what":"Filtering with outgroup","title":"vcf2others","text":"Outgroups, tend many fewer individuals ingroups, missing data ingroups due phylogenetic effects. Filtering entire dataset often results removal outgroup taxa vcf_filter_invariant() used filtering remove individuals % missing data threshold. Therefore, better strategy may extract outgroup, filter ingroup, add outgroup, remove invariant SNPs.","code":"# extract outgroup from VCF (keep all loci) groups1 <- as.factor(\"outgrp\") vcf_outgrp <- vcf_extract_pops(vcf, indiv_group, groups1, f_invar = FALSE)  # filter ingroup VCF for analyses then add outgroups vcf1 <- vcf_extract_pops(vcf, indiv_group, groups1, whitelist = FALSE, f_invar = FALSE) %>%   vcf_filter_missing_indivs(.9, f_invar = FALSE) %>%   vcf_filter_rank(.5) %>%   vcf_filter_maf(.03) %>%   vcf_filter_coverage(6) %>%   vcf_filter_oneSNP() %>%   vcf_filter_missingness(.4) %>%   vcf_filter_missing_indivs(.2, f_invar = FALSE) %>%   vcf_merge(vcf_outgrp) %>%   vcf_filter_invariant() #> removed samples are: CTGA_H3327  #>  removed samples are: CTGA_H3600  #> [1] \"final % missing data in VCF is 60.45 %\" #> [1] \"final % missing data in VCF is 11.45 %\" #> removed samples are: CTGA_H3646  #> [1] \"final % missing data in VCF is 6.38 %\" #> Joining with `by = join_by(FORMAT, id)`"},{"path":"https://legallab.github.io/vcf2others/articles/vcf2others.html","id":"converting-a-vcf-file-to-other-population-genetic-and-phylogenetic-formats","dir":"Articles","previous_headings":"How to use the functions of this package","what":"Converting a VCF file to other population genetic and phylogenetic formats","title":"vcf2others","text":"following functions take VCF, groups indiv_group (individuals groups relationship), convert VCF populations genetic phylogenetic formats, exporting/writing file format. default functions include missing data. desired, 100% complete data matrices can exported using “inc_missing = FALSE” flag. function vcf2genlight() automatically returns genlight object optionally can also export/write file format working directory. Generally vcf2genlight() function called within script using functions adegenet package rather importing genlight object.","code":"project <- \"trigonatus\"  ########## # datasets for analyses with unlinked SNPs vcf <- vcf_oneSNP  # read all sample names in vcf vcf_names <- colnames(vcf@gt)[-1] %>%   as_tibble() %>%   rename(id = 1) %>%   mutate(id, id = as.character(id))  # read sample to group assignment strata <- read.table(paste0(fpath, \"strata\"), header = TRUE) %>%   as_tibble() %>%   mutate(id, id = as.character(id))  # assign samples in vcf to groups strata <- vcf_names %>%   left_join(strata) #> Joining with `by = join_by(id)`  # check if all samples in vcf are assigned to groups if (any(is.na(strata$pop) == TRUE)) {   print(\"vcf has individuals not assigned to a group\")   print(strata[is.na(strata$pop) == TRUE,]) } else {   indiv_group <- as.factor(strata$pop) }  # read groups to be used; filter only those that are actually present groups <- read.table(paste0(fpath, \"groups\"), header = TRUE)[,1] %>%   .[. %in% unique(strata$pop)] %>%   as.factor()  ########## # export data formats # migrate-n https://peterbeerli.com/migrate-html5/ vcf2migrate(vcf, indiv_group, groups, out_file = paste0(path, project, '_migrateN.txt')) # migrate-n - new more compact heterozygosity format vcf2migrate(vcf, indiv_group, groups, out_file = paste0(path, project, '_migrateH.txt'), method = \"H\") # arlequin  vcf2arlequin(vcf, indiv_group, groups, out_file = paste0(path, project, '.arp')) # structure  vcf2structure(vcf, indiv_group, groups, out_file = paste0(path, project, '.str')) # faststucture  vcf2structure(vcf, indiv_group, groups, out_file = paste0(path, project, '.fstr'), method = \"F\") # genepop  vcf2genepop(vcf, indiv_group, groups, out_file = paste0(path, project, '.gen')) # smartsnp  vcf2smartsnp(vcf, indiv_group, groups, out_file = paste0(path, project, '.smartsnp')) # eigenstrat  vcf2eigenstrat(vcf, indiv_group, groups, out_file = paste0(path, project, '_eigenstrat')) # bayescan  vcf2bayescan(vcf, indiv_group, groups, out_file = paste0(path, project, '.bayescan')) # treemix  vcf2treemix(vcf, indiv_group, groups, out_file = paste0(path, project, '.treemix')) # apparent  vcf2apparent(vcf, indiv_group, groups, out_file = paste0(path, project, '.apparent')) # related  vcf2related(vcf, indiv_group, groups, out_file = paste0(path, project, '.related')) # dataframe with population membership in the last column vcf2df(vcf, indiv_group, groups, TRUE, out_file = paste0(path, project, '.df')) # snapp  vcf2snapp(vcf, indiv_group, groups, out_file = paste0(path, project, '_snapp.nex')) # nexus - only SNPs, meant for SDVq analyses vcf2nexus(vcf, indiv_group, groups, out_file = paste0(path, project, '_sdvq.nex')) # fasta  vcf2fasta(vcf, indiv_group, groups, TRUE, out_file = paste0(path, project, '.fas'))  ########## # datasets for analyses with linked SNPs vcf <- vcf_multiSNP  # read all sample names in vcf vcf_names <- colnames(vcf@gt)[-1] %>%   as_tibble() %>%   rename(id = 1) %>%   mutate(id, id = as.character(id))  # read sample to group assignment strata <- read.table(paste0(fpath, \"strata\"), header = TRUE) %>%   as_tibble() %>%   mutate(id, id = as.character(id))  # assign samples in vcf to groups strata <- vcf_names %>%   left_join(strata) #> Joining with `by = join_by(id)`  # check if all samples in vcf are assigned to groups if (any(is.na(strata$pop) == TRUE)) {   print(\"vcf has individuals not assigned to a group\")   print(strata[is.na(strata$pop) == TRUE,]) } else {   indiv_group <- as.factor(strata$pop) }  # read groups to be used; filter only those that are actually present groups <- read.table(paste0(fpath, \"groups\"), header = TRUE)[,1] %>%   .[. %in% unique(strata$pop)] %>%   as.factor()  ########## # export data formats # fineRadStructure - expects VCF of linked SNPs vcf2fineRadStructure(vcf, indiv_group, groups, out_file = paste0(path, project, '.finerad'))"},{"path":"https://legallab.github.io/vcf2others/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tomas Hrbek. Author, maintainer.","code":""},{"path":"https://legallab.github.io/vcf2others/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hrbek T (2023). vcf2others: Convert VCF Formats . R package version 0.9.0, https://legallab.github.io/vcf2others/.","code":"@Manual{,   title = {vcf2others: Convert VCF to Other Formats and More},   author = {Tomas Hrbek},   year = {2023},   note = {R package version 0.9.0},   url = {https://legallab.github.io/vcf2others/}, }"},{"path":"https://legallab.github.io/vcf2others/index.html","id":"vcf2others","dir":"","previous_headings":"","what":"Convert VCF to Other Formats and More","title":"Convert VCF to Other Formats and More","text":"Convert VCF Formats ","code":""},{"path":"https://legallab.github.io/vcf2others/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convert VCF to Other Formats and More","text":"package needs installed GitHub. devtools::install_github(\"legalLab/vcf2others\")","code":"library(vcf2others)"},{"path":"https://legallab.github.io/vcf2others/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Convert VCF to Other Formats and More","text":"package two main functionalities. First, used filtering, subsetting, merging otherwise wrangling VCF files. Second, used converting VCF file population genetic phylogenetic formats downstream analyses.","code":""},{"path":"https://legallab.github.io/vcf2others/index.html","id":"how-to-use-the-functions-of-this-package","dir":"","previous_headings":"","what":"How to use the functions of this package","title":"Convert VCF to Other Formats and More","text":"Following examples usage functions package.","code":""},{"path":"https://legallab.github.io/vcf2others/index.html","id":"load-vcf-and-associated-files-of-individuals-and-groups","dir":"","previous_headings":"","what":"Load VCF and associated files of individuals and groups","title":"Convert VCF to Other Formats and More","text":"First need load files. addition VCF, also need white/black list individuals (read file one column ‘id’ header), strata file associating individuals groups (read file two tab-separated columns ‘id’ ‘pop’ headers), file groups (read file one column ‘pop’ header). auxilary files used keeping/excluding individuals groups individuals filtering conversion data formats. strata file also necessary since many population genetic formats require information grouping individuals.","code":"library(vcfR) library(dplyr) library(vcf2others)  # path to example files fpath <- paste0(system.file(\"extdata\", package=\"vcf2others\"), \"/\") # set path and project name path <- \"/home/tomas/git/legal_public/packages/data/\" project <- \"trigonatus_all_sub\"  # load vcf vcf <- read.vcfR(paste0(fpath, project, \".vcf.gz\")) #> Scanning file to determine attributes. #> File attributes: #>   meta lines: 22 #>   header_line: 23 #>   variant count: 10000 #>   column count: 21 #> Meta line 22 read in. #> All meta lines processed. #> gt matrix initialized. #> Character matrix gt created. #>   Character matrix gt rows: 10000 #>   Character matrix gt cols: 21 #>   skip: 0 #>   nrows: 10000 #>   row_num: 0 #> Processed variant 1000Processed variant 2000Processed variant 3000Processed variant 4000Processed variant 5000Processed variant 6000Processed variant 7000Processed variant 8000Processed variant 9000Processed variant 10000Processed variant: 10000 #> All variants processed  # read individuals to include indivs <- read.table(paste0(fpath, \"indivs_b\"), header = TRUE)$id %>%   as.character()  # check if all indivs are in vcf_names if (any(!(indivs %in% colnames(vcf@gt)[-1]))) stop(paste(\"Some individuals in list not in VCF\"))  # read all sample names in vcf vcf_names <- colnames(vcf@gt)[-1] %>%   as_tibble() %>%   rename(id = 1) %>%   mutate(id, id = as.character(id))  # read sample to group assignment strata <- read.table(paste0(fpath, \"strata\"), header = TRUE) %>%   as_tibble() %>%   mutate(id, id = as.character(id))  # assign samples in vcf to groups strata <- vcf_names %>%   left_join(strata) #> Joining with `by = join_by(id)`  # check if all samples in vcf are assigned to groups if (any(is.na(strata$pop) == TRUE)) {   print(\"vcf has individuals not assigned to a group\")   print(strata[is.na(strata$pop) == TRUE,]) } else {   indiv_group <- as.factor(strata$pop) }  # read groups to be used; filter only those that are actually present groups <- read.table(paste0(fpath, \"groups\"), header = TRUE)[,1] %>%   .[. %in% unique(strata$pop)] %>%   as.factor()"},{"path":"https://legallab.github.io/vcf2others/index.html","id":"filtering-subsetting-merging-and-otherwise-wrangling-vcf-files","dir":"","previous_headings":"","what":"Filtering, subsetting, merging and otherwise wrangling VCF files","title":"Convert VCF to Other Formats and More","text":"functions can used directly VCF, many called functions package. example vcf_filter_invariant() remove invariant SNPs VCF, however, VCF definition invariant SNPs. However, VCF subsetted certain individuals removed, SNPs can become invariant need removed.","code":""},{"path":"https://legallab.github.io/vcf2others/index.html","id":"subsetting","dir":"","previous_headings":"Filtering, subsetting, merging and otherwise wrangling VCF files","what":"Subsetting","title":"Convert VCF to Other Formats and More","text":"functions vcf_extract_indivs(), vcf_extract_pops() vcf_sub_loci() used subset VCF specific individuals, group (individuals group/population), random subset loci, respectively. Subsetting individuals groups can done either whitelist (keep listed individuals/groups) blacklist (remove listed individuals/groups).","code":"# subset VCF by individuals (default whitelist = TRUE, remove invariants = TRUE) indivs1 <- c(\"CTGA_H4683\", \"CTGA_H4689\") vcf1 <- vcf_extract_indivs(vcf, indivs1)  # subset VCF by groups (default whitelist = TRUE, remove invariants = TRUE) groups1 <- c(\"bob\", \"joe\") %>%   as.factor() vcf1 <- vcf_extract_pops(vcf, indiv_group, groups1)  # subset VCF by n random loci (default n_loci = 1000) vcf1 <- vcf_sub_loci(vcf, n_loci = 5000)"},{"path":"https://legallab.github.io/vcf2others/index.html","id":"filtering","dir":"","previous_headings":"Filtering, subsetting, merging and otherwise wrangling VCF files","what":"Filtering","title":"Convert VCF to Other Formats and More","text":"Filtering consists removing individuals loci based specific properties. function vcf_filter_missing_indivs() removes individuals % missing SNP threshold. functions filter properties individuals SNPs across individuals. function vcf_filter_missingness() removes SNPs % missing threshold, vcf_filter_quality() removes SNPs quality threshold, vcf_filter_maf() removes SNPs minor allele frequency % threshold, vcf_filter_hets() removes SNPs heterozigosity % threshold, vcf_filter_rank() removes SNPs rank % threshold (rank specific VCFs generated DiscoSnpRad measures likelihood observed SNP variation due paralogs), vcf_filter_coverage() removes SNPs specific coverage (makes missing individual). Finally vcf_filter_invariant() removes invariant SNPs (SNPs may become invariant subsetting filtering). functions vcf_filter_oneSNP() vcf_filter_multiSNP() filter VCF remove linked SNPs (retain unliked SNPs) retain linked SNPs, respectively. general, analyses assume SNPs unlinked, however, analyses FineRadStructure work linked SNPs.","code":"# filter VCF for analyses (unlinked SNPs) vcf_oneSNP <- vcf_extract_indivs(vcf, indivs, whitelist = FALSE) %>%   vcf_filter_missing_indivs(.9) %>%   vcf_filter_rank(.5) %>%   vcf_filter_maf(.03) %>%   vcf_filter_coverage(6) %>%   vcf_filter_oneSNP() %>%   vcf_filter_missingness(.4) %>%   vcf_filter_missing_indivs(.2) #> removed samples are: CTGA_H3327  #>  removed samples are: CTGA_H3600  #> [1] \"final % missing data in VCF is 57.17 %\" #> [1] \"final % missing data in VCF is 25.42 %\" #> removed samples are: CTGA_H3646  #>  removed samples are: CTGA_H4598  #>  removed samples are: CTGA_H4613  #>  removed samples are: CTGA_H4683  #>  removed samples are: CTGA_H4689  #> [1] \"final % missing data in VCF is 2.92 %\"  # filter VCF for analyses (linked SNPs) vcf_multiSNP <- vcf_extract_indivs(vcf, indivs, whitelist = FALSE) %>%   vcf_filter_missing_indivs(.9) %>%   vcf_filter_rank(.5) %>%   vcf_filter_maf(.03) %>%   vcf_filter_coverage(6) %>%   vcf_filter_multiSNP() %>%   vcf_filter_missingness(.4) %>%   vcf_filter_missing_indivs(.2) #> removed samples are: CTGA_H3327  #>  removed samples are: CTGA_H3600  #> [1] \"final % missing data in VCF is 57.17 %\" #> [1] \"final % missing data in VCF is 25.2 %\" #> removed samples are: CTGA_H3646  #>  removed samples are: CTGA_H4613  #>  removed samples are: CTGA_H4683  #>  removed samples are: CTGA_H4689  #> [1] \"final % missing data in VCF is 5.15 %\""},{"path":"https://legallab.github.io/vcf2others/index.html","id":"extracting-merging-and-adding","dir":"","previous_headings":"Filtering, subsetting, merging and otherwise wrangling VCF files","what":"Extracting, merging and adding","title":"Convert VCF to Other Formats and More","text":"functions vcf_merge(), vcf_add_indivs(), vcf_extract_indivs() vcf_extract_pops() used merge two VCF files, add individuals second VCF first VCF, extract individuals/groups VCF saving separate VCF. vcf_add_indivs(), vcf_extract_indivs() vcf_extract_pops() functions designed mind work outgroups. phylogenetic effects, outgroups relatively missing data ingroups, often removed filtering. solution extract outgroup taxa vcf_extract_indivs() vcf_extract_pops(), filter ingroup VCF, add outgroup taxa vcf_add_indivs(). important filter invariant loci filtering ingroup, filter vcf_filter_invariant() adding back outgroup. functions vcf_extract_indivs(), vcf_extract_pops(), vcf_filter_missing_indivs() vcf_filter_coverage() default filter invariants, can turned using “f_invar = FALSE” flag.","code":"# extract individuals from VCF (keep all loci) indivs1 <- c(\"CTGA_H4644\", \"CTGA_H4661\", \"CTGA_H4683\", \"CTGA_H4689\") vcf_outgrp <- vcf_extract_indivs(vcf, indivs1, f_invar = FALSE) vcf_ingrp <- vcf_extract_indivs(vcf, indivs1, whitelist = FALSE, f_invar = FALSE)  # extract groups of individuals from VCF (keep all loci) groups1 <- as.factor(\"outgrp\") vcf_outgrp <- vcf_extract_pops(vcf, indiv_group, groups1, f_invar = FALSE) vcf_ingrp <- vcf_extract_pops(vcf, indiv_group, groups1, whitelist = FALSE, f_invar = FALSE)  # merge vcf_outgrp into vcf_ingrp vcf1 <- vcf_merge(vcf_ingrp, vcf_outgrp) #> Joining with `by = join_by(FORMAT, id)`  # add individuals from vcf_outgrp into vcf_ingrp (whitelist = TRUE is default) indivs1 <- c(\"CTGA_H4683\", \"CTGA_H4689\") vcf1 <- vcf_add_indivs(vcf_ingrp, vcf_outgrp, indivs1) #> Joining with `by = join_by(FORMAT, id)`"},{"path":"https://legallab.github.io/vcf2others/index.html","id":"filtering-with-outgroup","dir":"","previous_headings":"Filtering, subsetting, merging and otherwise wrangling VCF files","what":"Filtering with outgroup","title":"Convert VCF to Other Formats and More","text":"Outgroups, tend many fewer individuals ingroups, missing data ingroups due phylogenetic effects. Filtering entire dataset often results removal outgroup taxa vcf_filter_invariant() used filtering remove individuals % missing data threshold. Therefore, better strategy may extract outgroup, filter ingroup, add outgroup, remove invariant SNPs.","code":"# extract outgroup from VCF (keep all loci) groups1 <- as.factor(\"outgrp\") vcf_outgrp <- vcf_extract_pops(vcf, indiv_group, groups1, f_invar = FALSE)  # filter ingroup VCF for analyses then add outgroups vcf1 <- vcf_extract_pops(vcf, indiv_group, groups1, whitelist = FALSE, f_invar = FALSE) %>%   vcf_filter_missing_indivs(.9, f_invar = FALSE) %>%   vcf_filter_rank(.5) %>%   vcf_filter_maf(.03) %>%   vcf_filter_coverage(6) %>%   vcf_filter_oneSNP() %>%   vcf_filter_missingness(.4) %>%   vcf_filter_missing_indivs(.2, f_invar = FALSE) %>%   vcf_merge(vcf_outgrp) %>%   vcf_filter_invariant() #> removed samples are: CTGA_H3327  #>  removed samples are: CTGA_H3600  #> [1] \"final % missing data in VCF is 60.45 %\" #> [1] \"final % missing data in VCF is 11.45 %\" #> removed samples are: CTGA_H3646  #> [1] \"final % missing data in VCF is 6.38 %\" #> Joining with `by = join_by(FORMAT, id)`"},{"path":"https://legallab.github.io/vcf2others/index.html","id":"converting-a-vcf-file-to-other-population-genetic-and-phylogenetic-formats","dir":"","previous_headings":"","what":"Converting a VCF file to other population genetic and phylogenetic formats","title":"Convert VCF to Other Formats and More","text":"following functions take VCF, groups indiv_group (individuals groups relationship), convert VCF populations genetic phylogenetic formats, exporting/writing file format. default functions include missing data. desired, 100% complete data matrices can exported using “inc_missing = FALSE” flag. function vcf2genlight() automatically returns genlight object optionally can also export/write file format working directory. Generally vcf2genlight() function called within script using functions adegenet package rather importing genlight object.","code":"project <- \"trigonatus\"  ########## # datasets for analyses with unlinked SNPs vcf <- vcf_oneSNP  # read all sample names in vcf vcf_names <- colnames(vcf@gt)[-1] %>%   as_tibble() %>%   rename(id = 1) %>%   mutate(id, id = as.character(id))  # read sample to group assignment strata <- read.table(paste0(fpath, \"strata\"), header = TRUE) %>%   as_tibble() %>%   mutate(id, id = as.character(id))  # assign samples in vcf to groups strata <- vcf_names %>%   left_join(strata) #> Joining with `by = join_by(id)`  # check if all samples in vcf are assigned to groups if (any(is.na(strata$pop) == TRUE)) {   print(\"vcf has individuals not assigned to a group\")   print(strata[is.na(strata$pop) == TRUE,]) } else {   indiv_group <- as.factor(strata$pop) }  # read groups to be used; filter only those that are actually present groups <- read.table(paste0(fpath, \"groups\"), header = TRUE)[,1] %>%   .[. %in% unique(strata$pop)] %>%   as.factor()  ########## # export data formats # migrate-n https://peterbeerli.com/migrate-html5/ vcf2migrate(vcf, indiv_group, groups, out_file = paste0(path, project, '_migrateN.txt')) # migrate-n - new more compact heterozygosity format vcf2migrate(vcf, indiv_group, groups, out_file = paste0(path, project, '_migrateH.txt'), method = \"H\") # arlequin  vcf2arlequin(vcf, indiv_group, groups, out_file = paste0(path, project, '.arp')) # structure  vcf2structure(vcf, indiv_group, groups, out_file = paste0(path, project, '.str')) # faststucture  vcf2structure(vcf, indiv_group, groups, out_file = paste0(path, project, '.fstr'), method = \"F\") # genepop  vcf2genepop(vcf, indiv_group, groups, out_file = paste0(path, project, '.gen')) # smartsnp  vcf2smartsnp(vcf, indiv_group, groups, out_file = paste0(path, project, '.smartsnp')) # eigenstrat  vcf2eigenstrat(vcf, indiv_group, groups, out_file = paste0(path, project, '_eigenstrat')) # bayescan  vcf2bayescan(vcf, indiv_group, groups, out_file = paste0(path, project, '.bayescan')) # treemix  vcf2treemix(vcf, indiv_group, groups, out_file = paste0(path, project, '.treemix')) # apparent  vcf2apparent(vcf, indiv_group, groups, out_file = paste0(path, project, '.apparent')) # related  vcf2related(vcf, indiv_group, groups, out_file = paste0(path, project, '.related')) # dataframe with population membership in the last column vcf2df(vcf, indiv_group, groups, TRUE, out_file = paste0(path, project, '.df')) # snapp  vcf2snapp(vcf, indiv_group, groups, out_file = paste0(path, project, '_snapp.nex')) # nexus - only SNPs, meant for SDVq analyses vcf2nexus(vcf, indiv_group, groups, out_file = paste0(path, project, '_sdvq.nex')) # fasta  vcf2fasta(vcf, indiv_group, groups, TRUE, out_file = paste0(path, project, '.fas'))  ########## # datasets for analyses with linked SNPs vcf <- vcf_multiSNP  # read all sample names in vcf vcf_names <- colnames(vcf@gt)[-1] %>%   as_tibble() %>%   rename(id = 1) %>%   mutate(id, id = as.character(id))  # read sample to group assignment strata <- read.table(paste0(fpath, \"strata\"), header = TRUE) %>%   as_tibble() %>%   mutate(id, id = as.character(id))  # assign samples in vcf to groups strata <- vcf_names %>%   left_join(strata) #> Joining with `by = join_by(id)`  # check if all samples in vcf are assigned to groups if (any(is.na(strata$pop) == TRUE)) {   print(\"vcf has individuals not assigned to a group\")   print(strata[is.na(strata$pop) == TRUE,]) } else {   indiv_group <- as.factor(strata$pop) }  # read groups to be used; filter only those that are actually present groups <- read.table(paste0(fpath, \"groups\"), header = TRUE)[,1] %>%   .[. %in% unique(strata$pop)] %>%   as.factor()  ########## # export data formats # fineRadStructure - expects VCF of linked SNPs vcf2fineRadStructure(vcf, indiv_group, groups, out_file = paste0(path, project, '.finerad'))"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2apparent.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2apparent — vcf2apparent","title":"vcf2apparent — vcf2apparent","text":"converts vcfR format data Apparent infile","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2apparent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2apparent — vcf2apparent","text":"","code":"vcf2apparent(   vcf,   ind_pop,   keep_pop,   key = \"All\",   inc_missing = TRUE,   out_file = \"apparent_infile.txt\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2apparent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2apparent — vcf2apparent","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Apparent infile (factor) key -> relationship type (, Pa, Mo, Fa, ); default (character) inc_missing -> include missing data (logical) out_file -> name file output (Apparent infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2apparent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2apparent — vcf2apparent","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2apparent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2apparent — vcf2apparent","text":"function converts vcfR object Apparent formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2apparent.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2apparent — vcf2apparent","text":"Tomas Hrbek February 2023","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2apparent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2apparent — vcf2apparent","text":"","code":"vcf2apparent(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, key = key, inc_missing = TRUE, out_file = \"Genepop_infile.gen\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2apparent(my_vcf, ind_pop, keepers, out_file = \"Apparent_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2apparent(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2arlequin.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2arlequin — vcf2arlequin","title":"vcf2arlequin — vcf2arlequin","text":"converts vcfR format data Arlequin infile part based vcfR2migrate function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2arlequin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2arlequin — vcf2arlequin","text":"","code":"vcf2arlequin(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"arlequin.arp\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2arlequin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2arlequin — vcf2arlequin","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Arlequin infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (Arlequin infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2arlequin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2arlequin — vcf2arlequin","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2arlequin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2arlequin — vcf2arlequin","text":"function converts vcfR object Arlequin formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2arlequin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2arlequin — vcf2arlequin","text":"Tomas Hrbek December 2020","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2arlequin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2arlequin — vcf2arlequin","text":"","code":"vcf2arlequin(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"Arlequin_infile.arp\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2arlequin(my_vcf, ind_pop, keepers, out_file = \"Arlequin_infile.arp\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2arlequin(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2bayescan.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2bayescan — vcf2bayescan","title":"vcf2bayescan — vcf2bayescan","text":"converts vcfR format data Bayescan infile part based vcfR2migrate function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2bayescan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2bayescan — vcf2bayescan","text":"","code":"vcf2bayescan(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"bayescan_infile.txt\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2bayescan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2bayescan — vcf2bayescan","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Bayescan infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (Bayescan infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2bayescan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2bayescan — vcf2bayescan","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2bayescan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2bayescan — vcf2bayescan","text":"function converts vcfR object Bayescan formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2bayescan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2bayescan — vcf2bayescan","text":"Tomas Hrbek November 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2bayescan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2bayescan — vcf2bayescan","text":"","code":"vcf2bayescan(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"Bayescan_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2bayescan(my_vcf, ind_pop, keepers, out_file = \"Bayescan_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2bayescan(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2df.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2df — vcf2df","title":"vcf2df — vcf2df","text":"converts vcfR format data DataFrame infile adds last column individual's group origin motivated provide dataframe plotting PCA results use modified PCA function adegenet","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2df — vcf2df","text":"","code":"vcf2df(   vcf,   ind_pop,   keep_pop,   alleles = TRUE,   inc_missing = TRUE,   out_file = \"dataframe_infile.txt\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2df — vcf2df","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include DataFrame infile (factor) alleles -> record data alleles (GATC) SNPs (012) (logical) inc_missing -> include missing data (logical)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2df — vcf2df","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2df — vcf2df","text":"function converts vcfR object DataFrame formatted input file function adds group (population) membership last column function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2df — vcf2df","text":"Tomas Hrbek December 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2df — vcf2df","text":"","code":"vcf2df(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, alleles = TRUE, inc_missing = TRUE, out_file = \"dataframe_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2df(my_vcf, ind_pop, keepers, out_file = \"dataframe_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2df(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2eigenstrat.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2eigenstrat — vcf2eigenstrat","title":"vcf2eigenstrat — vcf2eigenstrat","text":"converts vcfR format data Eigenstrat infiles part based vcfR2migrate function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2eigenstrat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2eigenstrat — vcf2eigenstrat","text":"","code":"vcf2eigenstrat(   vcf,   ind_pop,   keep_pop,   sex = \"U\",   rel_pos = 0,   inc_missing = TRUE,   out_file = \"eigenstrat_infile\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2eigenstrat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2eigenstrat — vcf2eigenstrat","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Eigenstrat infiles (factor) inc_missing -> include missing data (logical) out_file -> name file output (Eigenstrat infiles)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2eigenstrat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2eigenstrat — vcf2eigenstrat","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2eigenstrat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2eigenstrat — vcf2eigenstrat","text":"function converts vcfR object Eigenstrat formatted input files list sexes provided, lists individuals unknown relative position chromosome (cM distance similar) provides, list 0 function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2eigenstrat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2eigenstrat — vcf2eigenstrat","text":"Tomas Hrbek December 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2eigenstrat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2eigenstrat — vcf2eigenstrat","text":"","code":"vcf2eigenstrat(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, sex = list_of_sex, rel_pos = marker_cM_map, inc_missing = TRUE, out_file = \"Eigenstrat\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2eigenstrat(my_vcf, ind_pop, keepers, out_file = \"Eigenstrat\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2eigenstrat(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2fasta — vcf2fasta","title":"vcf2fasta — vcf2fasta","text":"converts vcfR format data Fasta format infile","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2fasta — vcf2fasta","text":"","code":"vcf2fasta(   vcf,   ind_pop,   keep_pop,   interleaved = FALSE,   inc_missing = TRUE,   out_file = \"fasta.fas\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2fasta — vcf2fasta","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Fasta infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (Fasta infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2fasta — vcf2fasta","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fasta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2fasta — vcf2fasta","text":"function converts vcfR object Fasta formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fasta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2fasta — vcf2fasta","text":"Tomas Hrbek August 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2fasta — vcf2fasta","text":"","code":"vcf2fasta(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, interleaved = FALSE, inc_missing = TRUE, out_file = \"Fasta_infile.fas\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2fasta(my_vcf, ind_pop, keepers, out_file = \"Fasta_infile.fas\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2fasta(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fineRadStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2fineRadStructure — vcf2fineRadStructure","title":"vcf2fineRadStructure — vcf2fineRadStructure","text":"converts vcfR format data fineRadStructure infile part based vcfR2genepop function","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fineRadStructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2fineRadStructure — vcf2fineRadStructure","text":"","code":"vcf2fineRadStructure(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"fineRadStructure_infile.txt\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fineRadStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2fineRadStructure — vcf2fineRadStructure","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include fineRadStructure infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (fineRadStructure infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fineRadStructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2fineRadStructure — vcf2fineRadStructure","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fineRadStructure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2fineRadStructure — vcf2fineRadStructure","text":"function converts vcfR object fineRadStructure formatted input file function expects multiallelic loci","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fineRadStructure.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2fineRadStructure — vcf2fineRadStructure","text":"Tomas Hrbek July 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2fineRadStructure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2fineRadStructure — vcf2fineRadStructure","text":"","code":"vcf2fineRadStructure(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"fineRadStructure_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2fineRadStructure(my_vcf, ind_pop, keepers, out_file = \"fineRadStructure_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2fineRadStructure(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genepop.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2genepop — vcf2genepop","title":"vcf2genepop — vcf2genepop","text":"converts vcfR format data Genepop infile includes population names can ready read_genepop part based vcfR2migrate function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genepop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2genepop — vcf2genepop","text":"","code":"vcf2genepop(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"genepop_infile.txt\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genepop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2genepop — vcf2genepop","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Genepop infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (Genepop infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genepop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2genepop — vcf2genepop","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genepop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2genepop — vcf2genepop","text":"function converts vcfR object Genepop formatted input file function labels populations. read labeled populations use \"read_genepop\" function function remove indels, multiallelic loci, optionally loci missing data 01, 02, 03, 04 '', 'C', 'G', 'T'","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genepop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2genepop — vcf2genepop","text":"Tomas Hrbek January 2021","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genepop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2genepop — vcf2genepop","text":"","code":"vcf2genepop(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"Genepop_infile.gen\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2genepop(my_vcf, ind_pop, keepers, out_file = \"Genepop_infile.gen\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2genepop(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genlight.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2genlight — vcf2genlight","title":"vcf2genlight — vcf2genlight","text":"converts vcfR format data Genlight infile part based vcfR2genlight function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2genlight — vcf2genlight","text":"","code":"vcf2genlight(   vcf,   ind_pop,   keep_pop,   ploidy = 2,   inc_missing = TRUE,   save = FALSE,   out_file = \"genlight_infile\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2genlight — vcf2genlight","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Genlight infile (factor) ploidy -> ploidy level (default 2) inc_missing -> include missing data (logical) save -> save file (logical - default TRUE) just return Genlight object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2genlight — vcf2genlight","text":"Genlight object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genlight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2genlight — vcf2genlight","text":"function converts vcfR object Genlight formatted input file function labels populations. function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genlight.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2genlight — vcf2genlight","text":"Tomas Hrbek December 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2genlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2genlight — vcf2genlight","text":"","code":"vcf2genlight(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, ploidy = 2, inc_missing = TRUE, out_file = \"Genlight_infile\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2genlight(my_vcf, ind_pop, keepers, out_file = \"Genlight_infile\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2genlight(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2migrate.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2migrate — vcf2migrate","title":"vcf2migrate — vcf2migrate","text":"converts vcfR format data MigrateN infile adapted vcfR2migrate function (vcfR package) allow inclusion missing data Migrate output","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2migrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2migrate — vcf2migrate","text":"","code":"vcf2migrate(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"migrateN_infile.txt\",   method = \"N\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2migrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2migrate — vcf2migrate","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include MigrateN infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (MigrateN infile) method -> classic het format","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2migrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2migrate — vcf2migrate","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2migrate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2migrate — vcf2migrate","text":"function converts vcfR object MigrateN formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2migrate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2migrate — vcf2migrate","text":"Tomas Hrbek August 2020","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2migrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2migrate — vcf2migrate","text":"","code":"vcf2migrate(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"MigrateN_infile.txt\", method = \"N\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2migrate(my_vcf, ind_pop, keepers, out_file = \"MigrateN_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2migrate(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2nexus.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2nexus — vcf2nexus","title":"vcf2nexus — vcf2nexus","text":"converts vcfR format data Nexus format infile","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2nexus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2nexus — vcf2nexus","text":"","code":"vcf2nexus(vcf, ind_pop, keep_pop, inc_missing = TRUE, out_file = \"nexus.nex\")"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2nexus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2nexus — vcf2nexus","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Nexus infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (Nexus infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2nexus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2nexus — vcf2nexus","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2nexus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2nexus — vcf2nexus","text":"function converts vcfR object Nexus formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2nexus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2nexus — vcf2nexus","text":"Tomas Hrbek February 2021","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2nexus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2nexus — vcf2nexus","text":"","code":"vcf2nexus(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"Nexus_infile.nex\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2nexus(my_vcf, ind_pop, keepers, out_file = \"Nexus_infile.nex\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2nexus(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2related.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2related — vcf2related","title":"vcf2related — vcf2related","text":"converts vcfR format data Related infile part based vcfR2genepop function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2related.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2related — vcf2related","text":"","code":"vcf2related(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"related_infile.txt\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2related.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2related — vcf2related","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Related infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (Related infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2related.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2related — vcf2related","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2related.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2related — vcf2related","text":"function converts vcfR object Related formatted input file function remove indels, multiallelic loci, optionally loci missing data '', 'C', 'G', 'T' 01, 02, 03, 04","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2related.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2related — vcf2related","text":"Tomas Hrbek April 2023","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2related.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2related — vcf2related","text":"","code":"vcf2related(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"Genepop_infile.gen\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2related(my_vcf, ind_pop, keepers, out_file = \"Related_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2related(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2smartsnp.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2smartsnp — vcf2smartsnp","title":"vcf2smartsnp — vcf2smartsnp","text":"converts vcfR format data smartsnp tabular format infile part based vcfR2genlight function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2smartsnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2smartsnp — vcf2smartsnp","text":"","code":"vcf2smartsnp(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"smartsnp_infile.txt\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2smartsnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2smartsnp — vcf2smartsnp","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include genotype table infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (genotype table infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2smartsnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2smartsnp — vcf2smartsnp","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2smartsnp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2smartsnp — vcf2smartsnp","text":"function converts vcfR object genotype table formatted input file use smartsnp, keeps sample names column names function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2smartsnp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2smartsnp — vcf2smartsnp","text":"Tomas Hrbek October 2023","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2smartsnp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2smartsnp — vcf2smartsnp","text":"","code":"vcf2smartsnp(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"SmartSNP_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2smartsnp(my_vcf, ind_pop, keepers, out_file = \"SmartSNP_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2smartsnp(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2snapp.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2snapp — vcf2snapp","title":"vcf2snapp — vcf2snapp","text":"converts vcfR format data SNAPP (Nexus) format infile","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2snapp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2snapp — vcf2snapp","text":"","code":"vcf2snapp(vcf, ind_pop, keep_pop, inc_missing = TRUE, out_file = \"snapp.nex\")"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2snapp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2snapp — vcf2snapp","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include SNAPP infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (SNAPP infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2snapp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2snapp — vcf2snapp","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2snapp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2snapp — vcf2snapp","text":"function converts vcfR object SNAPP (Nexus) formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2snapp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2snapp — vcf2snapp","text":"Tomas Hrbek December 2020","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2snapp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2snapp — vcf2snapp","text":"","code":"vcf2snapp(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"SNAPP_infile.nex\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2snapp(my_vcf, ind_pop, keepers, out_file = \"SNAPP_infile.nex\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2snapp(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2structure.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2structure — vcf2structure","title":"vcf2structure — vcf2structure","text":"converts vcfR format data Structure FastStructure infile part based vcfR2migrate function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2structure — vcf2structure","text":"","code":"vcf2structure(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"structure.str\",   method = \"S\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2structure — vcf2structure","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include Structure infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (Structure infile) method -> Structure FastStructure format","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2structure — vcf2structure","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2structure — vcf2structure","text":"function converts vcfR object Structure FastStructure formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2structure.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2structure — vcf2structure","text":"Tomas Hrbek December 2020","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2structure — vcf2structure","text":"","code":"vcf2structure(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"Structure_infile.str\", method = \"S\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2structure(my_vcf, ind_pop, keepers, out_file = \"Structure_infile.str\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2structure(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2treemix.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf2treemix — vcf2treemix","title":"vcf2treemix — vcf2treemix","text":"converts vcfR format data TreeMix infile part based vcfR2migrate function (vcfR package)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2treemix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf2treemix — vcf2treemix","text":"","code":"vcf2treemix(   vcf,   ind_pop,   keep_pop,   inc_missing = TRUE,   out_file = \"treemix_infile.txt\" )"},{"path":"https://legallab.github.io/vcf2others/reference/vcf2treemix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf2treemix — vcf2treemix","text":"vcf -> vcfR object ind_pop -> population assignment individuals vcf (factor) keep_pop -> population(s) interest include TreeMix infile (factor) inc_missing -> include missing data (logical) out_file -> name file output (TreeMix infile)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2treemix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf2treemix — vcf2treemix","text":"nothing","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2treemix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf2treemix — vcf2treemix","text":"function converts vcfR object TreeMix formatted input file function remove indels, multiallelic loci, optionally loci missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2treemix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf2treemix — vcf2treemix","text":"Tomas Hrbek November 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf2treemix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf2treemix — vcf2treemix","text":"","code":"vcf2treemix(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, inc_missing = TRUE, out_file = \"TreeMix_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2treemix(my_vcf, ind_pop, keepers, out_file = \"TreeMix_infile.txt\") #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf2treemix(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_add_indivs.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_add_indivs — vcf_add_indivs","title":"vcf_add_indivs — vcf_add_indivs","text":"add individuals vcf","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_add_indivs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_add_indivs — vcf_add_indivs","text":"","code":"vcf_add_indivs(vcf, vcf1, indiv, whitelist = TRUE)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_add_indivs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_add_indivs — vcf_add_indivs","text":"vcf -> vcfR object vcf1 -> vcfR object indiv -> individuals add vcf vcf1 (factor)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_add_indivs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_add_indivs — vcf_add_indivs","text":"augmented vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_add_indivs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_add_indivs — vcf_add_indivs","text":"function adds individuals one vcfR object another vcfR object, returning new vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_add_indivs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_add_indivs — vcf_add_indivs","text":"Tomas Hrbek October 2023","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_add_indivs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_add_indivs — vcf_add_indivs","text":"","code":"vcf_add_indivs(vcf = my_vcf, vcf1 = other_vcf, indiv = indivs_to_add, whitelist = TRUE) #> Error in eval(expr, envir, enclos): object 'other_vcf' not found vcf_add_indivs(vcf = my_vcf, vcf1 = other_vcf, indiv = indivs_to_not_add, whitelist = FALSE) #> Error in eval(expr, envir, enclos): object 'other_vcf' not found vcf_add_indivs(my_vcf, other_vcf, indivs_to_add) #> Error in eval(expr, envir, enclos): object 'other_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_indivs.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_extract_indivs — vcf_extract_indivs","title":"vcf_extract_indivs — vcf_extract_indivs","text":"extract vcfR format data individuals","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_indivs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_extract_indivs — vcf_extract_indivs","text":"","code":"vcf_extract_indivs(vcf, indiv, whitelist = TRUE, f_invar = TRUE)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_indivs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_extract_indivs — vcf_extract_indivs","text":"vcf -> vcfR object indiv -> individuals retain/drop vcf (factor)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_indivs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_extract_indivs — vcf_extract_indivs","text":"extracted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_indivs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_extract_indivs — vcf_extract_indivs","text":"function extracts vcfR object individuals, returning new vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_indivs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_extract_indivs — vcf_extract_indivs","text":"Tomas Hrbek December 2020","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_indivs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_extract_indivs — vcf_extract_indivs","text":"","code":"vcf_extract_indivs(vcf = my_vcf, indiv = indivs_to_keep, whitelist = TRUE) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_extract_indivs(vcf = my_vcf, indiv = indivs_to_drop, whitelist = FALSE) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_extract_indivs(my_vcf, indivs_to_keep) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_pops.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_extract_pops — vcf_extract_pops","title":"vcf_extract_pops — vcf_extract_pops","text":"extract vcfR format data group","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_pops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_extract_pops — vcf_extract_pops","text":"","code":"vcf_extract_pops(vcf, ind_pop, keep_pop, whitelist = TRUE, f_invar = TRUE)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_pops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_extract_pops — vcf_extract_pops","text":"vcf -> vcfR object ind_pop -> group assignment individuals vcf (factor) keep_pop -> group(s) interest include/exclude vcf infile (factor)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_pops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_extract_pops — vcf_extract_pops","text":"extracted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_pops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_extract_pops — vcf_extract_pops","text":"function extracts vcfR object group(s) (individuals assigned one group), returning new vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_pops.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_extract_pops — vcf_extract_pops","text":"Tomas Hrbek December 2020","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_extract_pops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_extract_pops — vcf_extract_pops","text":"","code":"vcf_extract_pops(vcf = my_vcf, ind_pop = ind_pop, keep_pop = keepers, whitelist = TRUE) #> Error in eval(expr, envir, enclos): object 'ind_pop' not found vcf_extract_pops(vcf = my_vcf, ind_pop = ind_pop, keep_pop = non_keepers, whitelist = FALSE) #> Error in eval(expr, envir, enclos): object 'ind_pop' not found vcf_extract_pops(my_vcf, ind_pop, keepers) #> Error in eval(expr, envir, enclos): object 'ind_pop' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_coverage — vcf_filter_coverage","title":"vcf_filter_coverage — vcf_filter_coverage","text":"remove genotypes coverage threshold vcfR format data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_coverage — vcf_filter_coverage","text":"","code":"vcf_filter_coverage(vcf, cover = 10, f_invar = TRUE)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_coverage — vcf_filter_coverage","text":"vcf -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_coverage — vcf_filter_coverage","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_coverage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_coverage — vcf_filter_coverage","text":"function removes genotypes coverage threshold vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_coverage.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_coverage — vcf_filter_coverage","text":"Tomas Hrbek November 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_coverage — vcf_filter_coverage","text":"","code":"vcf_filter_coverage(vcf = my_vcf, cover = 10) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_filter_coverage(my_vcf) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_hets.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_hets — vcf_filter_hets","title":"vcf_filter_hets — vcf_filter_hets","text":"remove loci het threshold vcfR format data high hets indicative paralogs","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_hets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_hets — vcf_filter_hets","text":"","code":"vcf_filter_hets(vcf, hets = 0.4)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_hets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_hets — vcf_filter_hets","text":"vcf -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_hets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_hets — vcf_filter_hets","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_hets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_hets — vcf_filter_hets","text":"function removes loci het threshold vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_hets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_hets — vcf_filter_hets","text":"Tomas Hrbek October 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_hets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_hets — vcf_filter_hets","text":"","code":"vcf_filter_hets(vcf = my_vcf, hets = .4) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_filter_hets(my_vcf) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_invariant.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_invariant — vcf_filter_invariant","title":"vcf_filter_invariant — vcf_filter_invariant","text":"remove invariant loci vcfR format data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_invariant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_invariant — vcf_filter_invariant","text":"","code":"vcf_filter_invariant(vcf)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_invariant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_invariant — vcf_filter_invariant","text":"vcf -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_invariant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_invariant — vcf_filter_invariant","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_invariant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_invariant — vcf_filter_invariant","text":"function removes invariant loci vcfR object might desirable subsetting vcf individuals","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_invariant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_invariant — vcf_filter_invariant","text":"Tomas Hrbek February 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_invariant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_invariant — vcf_filter_invariant","text":"","code":"vcf_filter_invariant(vcf = my_vcf) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_filter_invariant(my_vcf) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_maf.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_maf — vcf_filter_maf","title":"vcf_filter_maf — vcf_filter_maf","text":"remove loci MAF threshold vcfR format data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_maf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_maf — vcf_filter_maf","text":"","code":"vcf_filter_maf(vcf, maf = 0.05)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_maf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_maf — vcf_filter_maf","text":"vcf -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_maf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_maf — vcf_filter_maf","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_maf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_maf — vcf_filter_maf","text":"function removes loci MAF threshold vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_maf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_maf — vcf_filter_maf","text":"Tomas Hrbek October 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_maf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_maf — vcf_filter_maf","text":"","code":"vcf_filter_maf(vcf = my_vcf, maf = .05) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_filter_maf(my_vcf) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missing_indivs.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_missing_indivs — vcf_filter_missing_indivs","title":"vcf_filter_missing_indivs — vcf_filter_missing_indivs","text":"remove vcfR format data indivs >% missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missing_indivs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_missing_indivs — vcf_filter_missing_indivs","text":"","code":"vcf_filter_missing_indivs(vcf, p_miss, f_invar = TRUE)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missing_indivs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_missing_indivs — vcf_filter_missing_indivs","text":"vcf -> vcfR object p_miss -> max missing data per locus decimal (numeric)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missing_indivs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_missing_indivs — vcf_filter_missing_indivs","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missing_indivs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_missing_indivs — vcf_filter_missing_indivs","text":"function subsets vcfR object % missing data within individual, returning new vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missing_indivs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_missing_indivs — vcf_filter_missing_indivs","text":"Tomas Hrbek October 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missing_indivs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_missing_indivs — vcf_filter_missing_indivs","text":"","code":"vcf_filter_missing_indivs(vcf = my_vcf, p_miss = p_miss) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_filter_missing_indivs(my_vcf, p_miss) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missingness.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_missingness — vcf_filter_missingness","title":"vcf_filter_missingness — vcf_filter_missingness","text":"subsets vcfR format data % missing data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missingness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_missingness — vcf_filter_missingness","text":"","code":"vcf_filter_missingness(vcf, p_miss)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missingness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_missingness — vcf_filter_missingness","text":"vcf -> vcfR object p_miss -> max missing data per locus decimal (numeric)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missingness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_missingness — vcf_filter_missingness","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missingness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_missingness — vcf_filter_missingness","text":"function subsets vcfR object % missing data, returning new vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missingness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_missingness — vcf_filter_missingness","text":"Tomas Hrbek February 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_missingness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_missingness — vcf_filter_missingness","text":"","code":"vcf_filter_missingness(vcf = my_vcf, p_miss = p_miss) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_filter_missingness(my_vcf, p_miss) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_multiSNP.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_multiSNP — vcf_filter_multiSNP","title":"vcf_filter_multiSNP — vcf_filter_multiSNP","text":"subsets vcfR format data keeping loci 2+ SNPs","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_multiSNP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_multiSNP — vcf_filter_multiSNP","text":"","code":"vcf_filter_multiSNP(vcf, minS = 2, maxS = 5)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_multiSNP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_multiSNP — vcf_filter_multiSNP","text":"vcf -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_multiSNP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_multiSNP — vcf_filter_multiSNP","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_multiSNP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_multiSNP — vcf_filter_multiSNP","text":"function subsets vcfR object keeping loci min max # SNPs per locus, returning new vcfR object default min = 2 max = 5 SNPs per locus Recommended input fineRADstructure analyses","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_multiSNP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_multiSNP — vcf_filter_multiSNP","text":"Tomas Hrbek February 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_multiSNP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_multiSNP — vcf_filter_multiSNP","text":"","code":"vcf_filter_multiSNP(vcf = my_vcf, minS = 2, maxS = 5) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'getCHROM': object 'my_vcf' not found vcf_filter_multiSNP(vcf = my_vcf) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'getCHROM': object 'my_vcf' not found vcf_filter_multiSNP(my_vcf) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'getCHROM': object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_oneSNP.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_oneSNP — vcf_filter_oneSNP","title":"vcf_filter_oneSNP — vcf_filter_oneSNP","text":"subsets vcfR format data keeping 1 SNP per locus","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_oneSNP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_oneSNP — vcf_filter_oneSNP","text":"","code":"vcf_filter_oneSNP(vcf)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_oneSNP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_oneSNP — vcf_filter_oneSNP","text":"vcf -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_oneSNP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_oneSNP — vcf_filter_oneSNP","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_oneSNP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_oneSNP — vcf_filter_oneSNP","text":"function subsets vcfR object keeping 1 SNP per locus, returning new vcfR object first SNP independent quality taken (may mofify future)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_oneSNP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_oneSNP — vcf_filter_oneSNP","text":"Tomas Hrbek February 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_oneSNP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_oneSNP — vcf_filter_oneSNP","text":"","code":"vcf_filter_oneSNP(vcf = my_vcf) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'getCHROM': object 'my_vcf' not found vcf_filter_oneSNP(my_vcf) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'getCHROM': object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_quality.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_quality — vcf_filter_quality","title":"vcf_filter_quality — vcf_filter_quality","text":"remove loci quality threshold vcfR format data","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_quality — vcf_filter_quality","text":"","code":"vcf_filter_quality(vcf, qual = 20)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_quality — vcf_filter_quality","text":"vcf -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_quality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_quality — vcf_filter_quality","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_quality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_quality — vcf_filter_quality","text":"function removes loci quality threshold vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_quality.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_quality — vcf_filter_quality","text":"Tomas Hrbek February 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_quality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_quality — vcf_filter_quality","text":"","code":"vcf_filter_quality(vcf = my_vcf, qual = 20) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'getQUAL': object 'my_vcf' not found vcf_filter_quality(my_vcf) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'getQUAL': object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_filter_rank — vcf_filter_rank","title":"vcf_filter_rank — vcf_filter_rank","text":"remove loci rank threshold vcfR format data rank calculated sqrt(chi-sqr/n) allele read counts used paralog detection - low rank values (<0.4) rank calculated DiscoSNP, registered Pk INFO","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_filter_rank — vcf_filter_rank","text":"","code":"vcf_filter_rank(vcf, rank = 0.4)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_filter_rank — vcf_filter_rank","text":"vcf -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_filter_rank — vcf_filter_rank","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_filter_rank — vcf_filter_rank","text":"function removes loci rank threshold vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_rank.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_filter_rank — vcf_filter_rank","text":"Tomas Hrbek February 2022","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_filter_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_filter_rank — vcf_filter_rank","text":"","code":"vcf_filter_quality(vcf = my_vcf, rank = .4) #> Error in vcf_filter_quality(vcf = my_vcf, rank = 0.4): unused argument (rank = 0.4) vcf_filter_quality(my_vcf) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'getQUAL': object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_merge — vcf_merge","title":"vcf_merge — vcf_merge","text":"merge two vcf; merge second vcf first one","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_merge — vcf_merge","text":"","code":"vcf_merge(vcf, vcf1)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_merge — vcf_merge","text":"vcf -> vcfR object vcf1 -> vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_merge — vcf_merge","text":"augmented vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_merge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_merge — vcf_merge","text":"function adds individuals second vcfR object first vcfR object, returning new vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_merge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_merge — vcf_merge","text":"Tomas Hrbek October 2023","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_merge — vcf_merge","text":"","code":"vcf_merge(vcf = my_vcf, vcf1 = other_vcf) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_merge(my_vcf, other_vcf) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_sub_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"vcf_sub_loci — vcf_sub_loci","title":"vcf_sub_loci — vcf_sub_loci","text":"randomly subsets vcfR format data # loci","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_sub_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcf_sub_loci — vcf_sub_loci","text":"","code":"vcf_sub_loci(vcf, n_loci = 1000)"},{"path":"https://legallab.github.io/vcf2others/reference/vcf_sub_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcf_sub_loci — vcf_sub_loci","text":"vcf -> vcfR object n_loci -> number loci subset (numeric)","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_sub_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vcf_sub_loci — vcf_sub_loci","text":"subsetted vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_sub_loci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcf_sub_loci — vcf_sub_loci","text":"function subsets vcfR object specific # loci, returning new vcfR object","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_sub_loci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcf_sub_loci — vcf_sub_loci","text":"Tomas Hrbek January 2023","code":""},{"path":"https://legallab.github.io/vcf2others/reference/vcf_sub_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcf_sub_loci — vcf_sub_loci","text":"","code":"vcf_sub_loci(vcf = my_vcf, n_loci = n_loci) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found vcf_sub_loci(my_vcf, n_loci) #> Error in eval(expr, envir, enclos): object 'my_vcf' not found"}]
